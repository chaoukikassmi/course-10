############################################## Notes ######################################################

- Functional Programing (FP)  and Procudural Programing are the same .
- a class is a Data Type.
- OOP: Divide to Classes (Classification) .
- clsPerson Person1 ; we call Person1 Instance From Class clsPerson.
- everything within a class is Private by default,so we write Public in some places.




############################################# Classes and Objects #########################################


#include <iostream>

using namespace std;

 class clsPerson
{
    public:
	string FirstName; // called Data Member.
	string LastName; // called Data Member.

	string FullName() // any Function within a class is a : Method & called Function Member. 
	{
		return FirstName + " " + LastName;
	}
};


int main()
{

clsPerson Person1; // Initialize new Object 
	Person1.FirstName = "Mohammed"; 
	Person1.LastName = "Abu-Hadhoud";
	cout << Person1.FullName(); // call a Method 

	return 0;
}

############################################# Class Members #########################################

- Data Member is any variable declared inside the class that holds data.
- Function Member is any function or procedure inside a class.
- Class Members are => Data Members and Function Members.

#############################################  Objects In Memory ####################################

- Every Object has it's own space in memory that hold both Data Members & Function Members.

#############################################  Access Specifiers/Modifiers ###########################

* In C++, there are 3 access modifiers: public - private - protected 
- The public members are accessible from any part of the program.
- The private members can only be accessed from within the class.
- The protected members can be accessed within the class and from the derived class(Inherit class).

############################################# Properties Set and Get ###########################
Note : 
- Properties are Functions allow you to Update Private Members inside the class
- Properties are two functions one for Setting Data and One for getting Data.(Seter and Geter ) .
- If you want to update data inside class you should write a property function to set them.
- If you want to retrieve Data Member from a class you should write a property function to get that data.
- Both property functions set and get they use a private data member to store and get data from it.

############################################# Code ############################

#include <iostream> 
using namespace std;

class clsPerson{
private: // Private Data Members
    string _FirstName;
    string _LastName;

public: 
    //Property Set
    void setFirstName(string FirstName)
    {
        _FirstName = FirstName;
    }

    //Property Get
    string FirstName()
    {
        return _FirstName;
    } 
    //Property Set 
    void setLastName(string LastName) {
        _LastName = LastName;
    }

    //Property Get 
    string LastName() {
        return _LastName;
    }
    string FullName() {
        return _FirstName + " " + _LastName;
    }
};

  int main() {
      clsPerson Person1;
      Person1.setFirstName("Mohammed");
      Person1.setLastName("Abu-Hadhoud");
      cout << "First Name:" << Person1.FirstName() << endl;
      cout << "Last Name:" << Person1.LastName() << endl;
      cout << "Full Name:" << Person1.FullName() << endl;
      
      return 0;
  }

############################################# Read Only Property ###########################
- In order have a read only property you only implement the set function and you don't implement the get function
بالعربية اذا كانت عندك بروبريتي جيت فقط دون سيتر هنا نقول عن الجيت بروبريتي انها ريد اونلي يعني تقرا فقط قيمة المتغيير ولا تهدل عليه ابدا.

- read / write property is to impliment: both get and set function 

######################### code 

#include <iostream>

using namespace std;

class clsPerson {

private:
	int _ID = 20;
	string _Name;

public:

	//Property set
	void setName(string Name) {
		_Name = Name;
	}
	//Property get
	string getName() {
		return _Name;
	}
	// read Only property
	int ID() {
		return _ID;
	}


};

int main()
{
	clsPerson Person1;

	Person1.setName("Mohammed");

	cout <<"ID:"<< Person1.ID() << endl;
	cout << "Name:"<< Person1.getName() << endl;

}

########################################## Encapsulation ########################

- In normal terms Encapsulation is defined as wrapping up of data and information under a single unit. In Object Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulates them.

######################################### Abstraction ###########################

- In simple terms, abstraction “displays” only the relevant attributes of objects and “hides” the unnecessary details.
- Abstraction is concept is not relvent to Abstracted Class !!

######################################### Calculator Project ######################

#include <iostream>
#include <string>
using namespace std;

class ClsCalculator
{
private:
	//Default values
	float _Result = 0;
	float _LastNumber = 0;
	float _PreviousResult = 0;
	string _LastOperation = "Clear";

	bool _isZero(float Number)
	{
		return (Number == 0);
	}

public:
	void add(float Number)
	{
		_LastNumber = Number;
		_PreviousResult = _Result;
		_LastOperation = "Adding";
		_Result += Number;
	}

	void subtract(float Number)
	{
		_LastNumber = Number;
		_PreviousResult = _Result;
		_LastOperation = "Subtract";
		_Result -= Number;
	}

	void multiply(float Number)
	{
		_LastNumber = Number;
		_PreviousResult = _Result;
		_LastOperation = "Multiply";
		_Result *= Number;
	}

	void divide(float Number)

	{
		_LastNumber = Number;

		if (_isZero(Number)) 
		{
			Number = 1;
		}

		_PreviousResult = _Result;
		_LastOperation = "Devide";
		_Result /= Number;
	}


	float GetFinalResults()
	{
		return _Result;
	}

	void Clear()
	{
		 _Result = 0;
		 _LastNumber = 0;
		 _PreviousResult = 0;
		 _LastOperation = "Clear";

	}

	void CancelLastOperation()
	{
		_LastNumber = 0;
		_LastOperation = "Canceling Last Operation";
		_Result = _PreviousResult;
	}


	void PrintResult()
	{
		cout << "Result :";
		cout << "After " << _LastOperation << " " << _LastNumber << " is " << _Result << "\n";
	}
};

int main()
{


	ClsCalculator Calculator;
	Calculator.add(15);
	Calculator.PrintResult();

	Calculator.divide(15);
	Calculator.PrintResult();

	return 0;
};

#################### Constructors
- A constructor is a special type of member function that is called automatically when an object is created.
- In C++, a constructor has the same name as that of the class and it does not have a return type.
- Default Constructor: A constructor with no parameters is known as a default constructor.

###################################

#include <iostream>
#include <string>
using namespace std;

class ClsAdress
{
private:
	string _AdressLine;
	string _MailBox;
	string _ZipCode;


public:
	//Constructor
	ClsAdress(string adress,string MailBox,string ZipCode)
	{
		_AdressLine = adress;
		_MailBox = MailBox;
		_ZipCode = ZipCode;
	}

	//Setters
	void SetAdressLine(string adress)
	{
		_AdressLine = adress;
	}

	void SetMailBox(string MailBox)
	{
		_MailBox = MailBox;
	}

	void SetZipCode(string ZipCode)
	{
		_ZipCode = ZipCode;
	}

	// Getters
	string getAdressLine()
	{
		return _AdressLine;
	}

	string getMailBox()
	{
		return _MailBox;
	}
	string getZipCode()
	{
		return _ZipCode;
	}

	void Print()
	{
		cout << "------------------ Address ---------------\n";
		cout << "\nAdress Line :" << getAdressLine() << endl;
		cout << "\nMail Box :" << getMailBox() << endl;
		cout << "\nZip Code :" << getZipCode() << endl;
		cout << "------------------ ******** --------------\n";
	}

};

int main()
{
	ClsAdress Adress("Debila El Oued","1245","556633");
	
	Adress.Print();


	return 0;
};

###########################  Destructors ########################
- Destructor is an instance member function which is invoked automatically whenever an object is going to be destroyed. Meaning, a destructor is the last function that is going to be called before an object is destroyed.
- There is only One Distructor in Class - and could be more than one Constructor in a Class
- remember: 
       clsPersson* Person = new clsPerson; // initilize new object type Pointer(*)
       Delete Person;// in Pointer object Delete Manualy by this code.it's very important ! will cost you slow performance later on .

################################################################################

	// Destructor : note called last one of class member ,will excuted to free memory from objects that we don't need
	~ClsAdress()
	{
		cout << "\n HI,IAM Destructor";
	}
##################################### Static Varible or Members ############################
- a data member is declared as static, only one copy of the data is maintained for all objects of the class.
- We can define class members static using static keyword. When we declare a member of a class as static it means no matter how many objects of the class are created, there is only one copy of the static member.
- Static Member is a variable that is shared for all objects, any object modifies it it get modified for all other objects.

##################### code ##########
#include <iostream>
#include <string>
using namespace std;


class clsA 
{

public:

    int var;
    static int counter;

    clsA()
    {
        counter++;  
    }

    void Print()
    {
        cout << "\nvar     = " << var <<endl;
        cout << "counter = " << counter << endl;
    }

};

int clsA::counter = 0; //static variable initialisation outside the class

int main()
{   
   

    clsA A1, A2,A3;

    A1.var = 10;
    A2.var = 20;
    A3.var = 30;

    A1.Print();
    A2.Print();
    A3.Print();

   
    A1.counter = 500;

    cout << "\nafter chaning the static member counter in one object:\n";

    A1.Print();
    A2.Print();
    A3.Print();

}
####################################### Static Function ##################

#include <iostream>
using namespace std;

class clsA 
{

public:

     // a static function
    static int Function1()
    {
        return 10;
    }

    int Function2()
    {
        return 20;
    }

};

int main()
{   
   
    //The following line calls static function directly via class no throught the object

    //At class level you can call only static methods and static members

    cout << clsA::Function1() <<endl;// call static method or function

    //static methods can also be called throught the object.
        clsA A1, A2;
    cout << A1.Function1() << endl; // call function1 method
    cout << A1.Function2() << endl;
    cout << A2.Function1() << endl;
   

}
############################## Inheritence ################

#include <iostream>
using namespace std;

// Base class
class Vehicle {
public:
    string brand = "Ford";
    void honk() {
        cout << "Tuut, tuut! \n";
    }
};

// Derived class
class Car : public Vehicle {
public:
    string model = "Mustang";
};

int main() {
    Car myCar;
    myCar.honk();
    cout << myCar.brand + " " + myCar.model;
    return 0;
}

###################################### Parameterized Constructor of the Base Class ########################

#include <iostream>
using namespace std;

class clsPerson // Base Class
{

private:
	int _ID;
	string _FirstName;
	string _LastName;
	string _Email;
	string _Phone;
public:
	//Constructor 
	clsPerson(int ID, string FirstName, string LastName, string Email, string Phone)
	{
		_ID = ID;
		_FirstName = FirstName;
		_LastName = LastName;
		_Email = Email;
		_Phone = Phone;
	}

	void setFirstName(string FirstName)
	{
		_FirstName = FirstName;
	}

	void setLastName(string LastName)
	{
		_LastName = LastName;
	}


	void setEmail(string Email)
	{
		_Email = Email;
	}

	void setPhone(string Phone)
	{
		_Phone = Phone;
	}

	int getID()
	{
		return _ID;
	}

	string getFirstName()
	{
		return _FirstName;
	}

	string getLastName()
	{
		return _LastName;
	}

	string FullName()
	{
		return _FirstName + " " + _LastName;
	}



	string getEmail()
	{
		return _Email;
	}

	string getPhone()
	{
		return _Phone;
	}

	void Print()
	{
		cout << "\nInfo:";
		cout << "\n___________________";
		cout << "\nID        : " << _ID;
		cout << "\nFirstName : " << _FirstName;
		cout << "\nLastName  : " << _LastName;
		cout << "\nFull Name : " << FullName();
		cout << "\nEmail     : " << _Email;
		cout << "\nPhone     : " << _Phone;
		cout << "\n___________________\n";
	}
	void SendSMS(string TextMessage)
	{
		cout << "\nThe following SMS sent successfully to phone: " << _Phone;
		cout << "\n" << TextMessage << endl;
	}

	void SendEmail(string Subject, string Body)
	{
		cout << "\nThe following message sent successfully to email: " << _Email;
		cout << "\nSubject: " << Subject;
		cout << "\nBody: " << Body << endl;
	}
};

//sub class (Derived Class) 
class clsEmployee : public clsPerson
{
private:
	string _Title;
	float _Salary;
	string _Department;
public:
	//Constructor
	clsEmployee(int ID, string FirstName, string LastName, string Email, string Phone, string Title, float Salary, string Department) 
		       : clsPerson(ID, FirstName, LastName, Email, Phone) // => Parameterized Constructor of the Base Class => Send parameters to Base Class
	{
		_Title = Title;
		_Salary = Salary;
		_Department = Department;
	}

	void setTitle(string Title)
	{
		_Title = Title;
	}


	void setSalary(float Salary)
	{
		_Salary = Salary;
	}

	void setDepartment(string Department)
	{
		_Department = Department;
	}


	string getTitle()
	{
		return _Title;
	}

	float getSalary()
	{
		return _Salary;
	}

	string getDepartment()
	{
		return _Department;
	}

	void Print()
	{
		cout << "\nInfo:";
		cout << "\n___________________";
		cout << "\nID        : " << getID();
		cout << "\nFirstName : " << getFirstName();
		cout << "\nLastName  : " << getLastName();
		cout << "\nFull Name : " << FullName();
		cout << "\nTitle     : " << _Title;
		cout << "\nEmail     : " << getEmail();
		cout << "\nPhone     : " << getPhone();
		cout << "\nSalary    : " << _Salary;
		cout << "\nDepartment: " << _Department;
		cout << "\n___________________\n";
	}
};

int main()
{
	clsEmployee Employee1(10, "Ahmed", "ALghami", "AL Baha", "Ahmed@gmail.com", "1234567890", 15000, "Computer Sciense");
	Employee1.Print();
	Employee1.SendEmail("I have a problem", "I have a problem with your company");
	Employee1.SendSMS("Hello I'm " + Employee1.FullName() + " How Are You Doing");
}

###################################### function overriding ###################################

// C++ program to demonstrate function overriding

#include <iostream>
using namespace std;

class Base {
   public:
    void print() {
        cout << "Base Function" << endl;
    }
};

class Derived : public Base {
   public:
    void print() {
        cout << "Derived Function" << endl;
    }
};

int main() {
    Derived derived1;
    derived1.print();
    return 0;
}
