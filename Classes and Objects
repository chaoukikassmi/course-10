############################################## Notes ######################################################

- Functional Programing (FP)  and Procudural Programing are the same .
- a class is a Data Type.
- OOP: Divide to Classes (Classification) .
- clsPerson Person1 ; we call Person1 Instance From Class clsPerson.
- everything within a class is Private by default,so we write Public in some places.




############################################# Classes and Objects #########################################


#include <iostream>

using namespace std;

 class clsPerson
{
    public:
	string FirstName; // called Data Member.
	string LastName; // called Data Member.

	string FullName() // any Function within a class is a : Method & called Function Member. 
	{
		return FirstName + " " + LastName;
	}
};


int main()
{

clsPerson Person1; // Initialize new Object 
	Person1.FirstName = "Mohammed"; 
	Person1.LastName = "Abu-Hadhoud";
	cout << Person1.FullName(); // call a Method 

	return 0;
}

############################################# Class Members #########################################

- Data Member is any variable declared inside the class that holds data.
- Function Member is any function or procedure inside a class.
- Class Members are => Data Members and Function Members.

#############################################  Objects In Memory ####################################

- Every Object has it's own space in memory that hold both Data Members & Function Members.

#############################################  Access Specifiers/Modifiers ###########################

* In C++, there are 3 access modifiers: public - private - protected 
- The public members are accessible from any part of the program.
- The private members can only be accessed from within the class.
- The protected members can be accessed within the class and from the derived class(Inherit class).

############################################# Properties Set and Get ###########################
Note : 
- Properties are Functions allow you to Update Private Members inside the class
- Properties are two functions one for Setting Data and One for getting Data.(Seter and Geter ) .
- If you want to update data inside class you should write a property function to set them.
- If you want to retrieve Data Member from a class you should write a property function to get that data.
- Both property functions set and get they use a private data member to store and get data from it.

############################################# Code ############################

#include <iostream> 
using namespace std;

class clsPerson{
private: // Private Data Members
    string _FirstName;
    string _LastName;

public: 
    //Property Set
    void setFirstName(string FirstName)
    {
        _FirstName = FirstName;
    }

    //Property Get
    string FirstName()
    {
        return _FirstName;
    } 
    //Property Set 
    void setLastName(string LastName) {
        _LastName = LastName;
    }

    //Property Get 
    string LastName() {
        return _LastName;
    }
    string FullName() {
        return _FirstName + " " + _LastName;
    }
};

  int main() {
      clsPerson Person1;
      Person1.setFirstName("Mohammed");
      Person1.setLastName("Abu-Hadhoud");
      cout << "First Name:" << Person1.FirstName() << endl;
      cout << "Last Name:" << Person1.LastName() << endl;
      cout << "Full Name:" << Person1.FullName() << endl;
      
      return 0;
  }

############################################# Read Only Property ###########################
- In order have a read only property you only implement the set function and you don't implement the get function
بالعربية اذا كانت عندك بروبريتي جيت فقط دون سيتر هنا نقول عن الجيت بروبريتي انها ريد اونلي يعني تقرا فقط قيمة المتغيير ولا تهدل عليه ابدا.

- read / write property is to impliment: both get and set function 

######################### code 

#include <iostream>

using namespace std;

class clsPerson {

private:
	int _ID = 20;
	string _Name;

public:

	//Property set
	void setName(string Name) {
		_Name = Name;
	}
	//Property get
	string getName() {
		return _Name;
	}
	// read Only property
	int ID() {
		return _ID;
	}


};

int main()
{
	clsPerson Person1;

	Person1.setName("Mohammed");

	cout <<"ID:"<< Person1.ID() << endl;
	cout << "Name:"<< Person1.getName() << endl;

}

########################################## Encapsulation ########################

- In normal terms Encapsulation is defined as wrapping up of data and information under a single unit. In Object Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulates them.

######################################### Abstraction ###########################

- In simple terms, abstraction “displays” only the relevant attributes of objects and “hides” the unnecessary details.
- Abstraction is concept is not relvent to Abstracted Class !!

######################################### Calculator Project ######################

#include <iostream>
#include <string>
using namespace std;

class ClsCalculator
{
private:
	//Default values
	float _Result = 0;
	float _LastNumber = 0;
	float _PreviousResult = 0;
	string _LastOperation = "Clear";

	bool _isZero(float Number)
	{
		return (Number == 0);
	}

public:
	void add(float Number)
	{
		_LastNumber = Number;
		_PreviousResult = _Result;
		_LastOperation = "Adding";
		_Result += Number;
	}

	void subtract(float Number)
	{
		_LastNumber = Number;
		_PreviousResult = _Result;
		_LastOperation = "Subtract";
		_Result -= Number;
	}

	void multiply(float Number)
	{
		_LastNumber = Number;
		_PreviousResult = _Result;
		_LastOperation = "Multiply";
		_Result *= Number;
	}

	void divide(float Number)

	{
		_LastNumber = Number;

		if (_isZero(Number)) 
		{
			Number = 1;
		}

		_PreviousResult = _Result;
		_LastOperation = "Devide";
		_Result /= Number;
	}


	float GetFinalResults()
	{
		return _Result;
	}

	void Clear()
	{
		 _Result = 0;
		 _LastNumber = 0;
		 _PreviousResult = 0;
		 _LastOperation = "Clear";

	}

	void CancelLastOperation()
	{
		_LastNumber = 0;
		_LastOperation = "Canceling Last Operation";
		_Result = _PreviousResult;
	}


	void PrintResult()
	{
		cout << "Result :";
		cout << "After " << _LastOperation << " " << _LastNumber << " is " << _Result << "\n";
	}
};

int main()
{


	ClsCalculator Calculator;
	Calculator.add(15);
	Calculator.PrintResult();

	Calculator.divide(15);
	Calculator.PrintResult();

	return 0;
};

####################
